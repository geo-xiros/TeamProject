@model IEnumerable<TeamProject.Models.Court>
@using TeamProject.Models
@{
    ViewBag.Title = "Bookings";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

@section styles
{
    <link rel="stylesheet" href="~/Content/book.css" />
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.2/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">
}
<div class="row">
    <!-- Courts List -->
    <nav class="col-2 sidenav">
        <ul class="list-group shadow-sm">
            @foreach (var court in Model)
            {
                <li court-id="@court.Id"
                    class="list-group-item d-flex justify-content-between align-items-center">
                    @court.Name
                </li>
            }
        </ul>
    </nav>

    <main class="col-10">
        <h2 class="bd-title">Bookings for <small class="text-muted" id="court-title"></small></h2>

        <!-- Tab Calendar/List View -->
        <ul class="nav nav-tabs tab-selection">
            <li class="nav-item">
                <a class="nav-link active"
                   href="#"
                   update-container="calendar"
                   container="#calendar-container">Calendar View</a>
            </li>
            <li class="nav-item">
                <a class="nav-link"
                   href="#"
                   update-container="list"
                   container="#list-container">List View</a>
            </li>
        </ul>

        <!-- Period + Control Buttons-->
        <div class="row timeslot-header">
            <div id="prev-week-btn" class="col-1"><i class="fas fa-arrow-circle-left"></i></div>
            <h3 id="timeslot-week" class="col text-lg-center"></h3>
            <div id="next-week-btn" class="col-1"><i class="fas fa-arrow-circle-right"></i></div>
        </div>

        <!-- Containers -->
        <div id="calendar-container">
            <table class="table timeSlotsBooking">
                <thead>
                    <tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
        <div id="list-container" class="d-none">
            <table class="table">
                <thead>
                    <tr><th>Booked Date/Time<th>Name<th>Email<th>Duration<th></tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>

        <!-- Back to Branch -->
        <div>
            @Html.ActionLink("Back to Branch", "Index", "Branches", new { id = Model.FirstOrDefault()?.BranchId ?? 0 }, null)
        </div>
    </main>
</div>
@section scripts
{
    <script src="~/Scripts/moment.js"></script>
    <script>
        $(document).ready(function () {
            const dateFrom = firstWeekDate();
            const dateTo = dateFrom.clone().add(6, 'days').hour(23).minute(59).second(59);
            const popovers = [];
            $('[data-toggle="popover"]')
                .popover();

            // on booked hover populate popover and show
            $('.timeSlotsBooking tbody')
                .on('mouseenter', 'div[booked]', function () {
                    const $popover = $(this);

                    // get data from api call if empty
                    if ($popover.attr('data-content') == '') {
                        $.getJSON(`/api/bookings/GetBookingInfo/${$popover.attr('id')}`)
                            .done(function (data) {
                                // populate popover and show
                                $popover
                                    .attr('data-content',
                                    `<p><strong>Customer:</strong>
                                     <br>${data.User.UserName}</p>
                                     <p><strong>Email:</strong>
                                     <br>${data.User.Email}</p>
                                     <p><strong>Book Key:</strong>
                                     <br>${data.BookKey}</p>                                     
                                     <p><strong>Cost:</strong>
                                     ${data.Court.Price}&euro;</p>`)
                                    .attr('data-original-title',
                                        moment(data.BookedAt).format("dddd DD/MM/YYYY HH:mm"))
                                    .popover('show');

                                popovers.push($popover);
                            });
                    } else {

                        $popover.popover('show');
                        popovers.push($popover);

                    }
                }).on('mouseleave', 'div[booked]', function () {

                    $(popovers).popover('hide');
                    popovers.length = 0;

                });

            // on next-week-button clicked add 7 days to FromDate, ToDate inputs and submit form
            $('#next-week-btn').on('click', () => moveAndRefresh(7));

            // on next-week-button clicked subtract 7 days to FromDate, ToDate inputs and submit form
            $('#prev-week-btn').on('click', () => moveAndRefresh(-7));

            // move week and update container
            function moveAndRefresh(value) {
                dateFrom.add(value, 'days');
                dateTo.add(value, 'days');

                // update header week period
                $('#timeslot-week')
                    .text(dateFrom.format("DD/MM/YYYY") + ' - ' +
                        dateTo.format("DD/MM/YYYY"));

                refreshListBookings();
            }

            // on side nav court (li) clicked set CourtId input and submit form
            $('.sidenav').on('click', 'li', function () {
                const courtId = $(this).attr('court-id');

                $('nav.sidenav li.active').toggleClass('active');

                $(this).toggleClass('active');

                $('#CourtId').attr('value', courtId);

                $('#court-title').text($(this).text());

                refreshListBookings();
            });

            // activate clicked tab and show tabs data
            $('.tab-selection li a').on('click', function () {

                var $prevActive = $('.tab-selection a.active');

                $prevActive.removeClass('active');
                $(this).addClass('active');

                // hide current active tab
                $($prevActive.attr('container')).addClass('d-none');

                refreshListBookings();
                
            });

            // ajax call and container updating info
            const containerInfo = {
                calendar: { updateFunc: getCalendarHtml, apiAction: 'GetCourtsForCalendarView' },
                list: { updateFunc: getListHtml, apiAction: 'GetCourtsForListView' }
            };

            // refresh data and update container based on selected tab using containerInfo
            function refreshListBookings() {
                const courtId = $('nav.sidenav li.active')
                    .attr('court-id');
                const tabContainer = $('.tab-selection a.active')
                    .attr('update-container');
                const container = containerInfo[tabContainer];

                // hide popovers
                $(popovers).popover('hide');
                popovers.length = 0;

                $.getJSON(`/api/bookings/${container.apiAction}/${courtId}`, {
                    fromDate: dateFrom.clone().utc().format(),
                    toDate: dateTo.clone().utc().format()
                }).done(function (data) {

                    // get container html
                    const html = container
                        .updateFunc(data);

                    // update container html
                    $(`#${tabContainer}-container tbody`)
                        .html(html);

                    // show clicked tab
                    $(`#${tabContainer}-container`).removeClass('d-none');
                });
            }

            // generate html for calndar view
            function getCalendarHtml(data) {
                // set days header with day + month
                $('#calendar-container table thead tr')
                    .html(getDayHeaders(dateFrom.clone()));

                let html = '';
                for (var hour of data) {

                    html += '<tr>';
                    html += `<td class="align-middle">${moment(hour.Hour,'hh:mm').format('HH:mm')}</td>`;
                    for (var i = 1; i <= 7; i++) {
                        let bookId = hour[`Day${i}`];

                        if (bookId > 0) {
                            html +=
                                `<td>
                                        <a href="#"
                                            data-toggle="dropdown"
                                            aria-haspopup="true"
                                            aria-expanded="false" booked>
                                            <div id="${bookId}"
                                                    data-html="true"
                                                    data-placement="left"
                                                    data-toggle="popover"
                                                    title=""
                                                    data-content=""
                                                    booked>
                                                booked
                                            </div>
                                        </a>
                                        <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                                            <a class="dropdown-item" href="/Admin/Bookings/Delete/${bookId}">Cancel</a>
                                        </div>
                                    </td>`;
                        } else if (bookId == 0) {
                            html += '<td><a notbooked>-</a></td>';
                        } else {
                            html += '<td></td>';
                        }
                    }
                    html += '</tr>';
                };
                return html;
            }

            // get day headers for calendar view
            function getDayHeaders(date) {

                return '<th></th>' +
                    [0, 1, 2, 3, 4, 5, 6].map(function (i) {
                        const dayHeader = `<th>${date.format("dddd<br/>DD MMM")}</th>`;
                        date.add(1, 'days');
                        return dayHeader;
                    }).join('');
            }

            // generate html for list view
            function getListHtml(data) {
                const entries = Object.entries(data);

                let html = '';
                for (var day of entries) {

                    html +=
                        `<tr>
                                <th colspan="5">${day[0]}</th>
                            </tr>`;

                    for (var booking of day[1]) {

                        html +=
                            `<tr>
                                    <td>${moment(booking.BookedAt).format("HH:mm")}</td>
                                    <td>${booking.User.UserName}</td>
                                    <td>${booking.User.Email}</td>
                                    <td>${booking.Duration}</td>
                                    <td>
                                        <a href="/Admin/Bookings/Details/${booking.Id}">Details</a> |
                                        <a href="/Admin/Bookings/Delete/${booking.Id}">Delete</a>
                                    </td>
                                </tr>`;
                    }

                }
                return html;
            }

            // calculates and returns weeks start date based on current date
            function firstWeekDate() {
                const currentDate = moment().hour(0).minute(0).second(0),
                    day = currentDate.day(),
                    diff = (day == 0 ? -6 : 1) - day;

                return currentDate
                    .add(diff, 'days');
            }

            // set active courtId on side nav bar
            $('nav.sidenav li:first-child')
                .addClass('active');

            moveAndRefresh(0);
        });
    </script>
}

